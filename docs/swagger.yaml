basePath: /
definitions:
  db.Song:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      groupName:
        type: string
      id:
        type: integer
      link:
        type: string
      releaseDate:
        type: string
      songName:
        type: string
      text:
        type: string
      updatedAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple API for managing music library.
  title: Music Library API
  version: 0.0.1
paths:
  /songs:
    get:
      consumes:
      - application/json
      description: Get a list of songs with optional filtering and pagination
      parameters:
      - description: Filter by group name
        in: query
        name: group
        type: string
      - description: Filter by song name
        in: query
        name: song
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Song'
            type: array
      summary: Get songs
      tags:
      - songs
  /songs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific song by ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete song
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Update a specific song by ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Song object
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/db.Song'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Song'
      summary: Update song
      tags:
      - songs
  /songs/{id}/text:
    get:
      consumes:
      - application/json
      description: Get the text of a specific song by ID with optional pagination
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get song text
      tags:
      - songs
  /songs/add:
    post:
      consumes:
      - application/json
      description: Add a new song
      parameters:
      - description: Song object
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/db.Song'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.Song'
      summary: Add song
      tags:
      - songs
swagger: "2.0"
